from . import db  # Import the database instance from the current package
from flask_login import UserMixin
from sqlalchemy.sql import func  # Useful for automatic timestamps if needed


class User(db.Model, UserMixin):
    """
    Represents a user in the system.

    Attributes:
        id (int): Unique identifier for the user.
        email (str): User's email address (max 150 characters, unique).
        password (str): Hashed user password.
        username (str): User's chosen username (max 150 characters, unique).
        fullname (str): User's full name.
        numModelsSaved (int): Number of models saved by the user.
        numTrainingsHistory (int): Number of training sessions in the user's history.
    """
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True)
    password = db.Column(db.String(150))
    username = db.Column(db.String(150), unique=True)
    fullname = db.Column(db.String(150))
    numModelsSaved = db.Column(db.Integer)
    numTrainingsHistory = db.Column(db.Integer)
    # Uncomment and configure the following line if you add a "Note" model later:
    # notes = db.relationship('Note')

    def __init__(self, email, password, username, fullname, numModelsSaved, numTrainingsHistory):
        self.email = email
        self.password = password
        self.username = username
        self.fullname = fullname
        self.numModelsSaved = numModelsSaved
        self.numTrainingsHistory = numTrainingsHistory


class ModelSaved(db.Model, UserMixin):
    """
    Represents a model saved by a user.

    Attributes:
        name (str): Name of the model file (primary key).
        date (str): Date when the model was trained.
        test_accuracy (float): Accuracy obtained during evaluation on the test set.
        test_loss (float): Loss obtained during evaluation on the test set.
        reportPDFassociated (str): Name of the associated PDF report (if generated).
        path (str): Path where the model file (.pth) is stored.
        user_id (int): Foreign key referencing the user who saved the model.
    """
    name = db.Column(db.String(150), primary_key=True)
    date = db.Column(db.String(150))
    test_accuracy = db.Column(db.Float)
    test_loss = db.Column(db.Float)
    reportPDFassociated = db.Column(db.String(150))
    path = db.Column(db.String(150))
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))

    def __init__(self, name, date, test_accuracy, test_loss, reportPDFassociated, path, user_id):
        self.name = name
        self.date = date
        self.test_accuracy = test_accuracy
        self.test_loss = test_loss
        self.reportPDFassociated = reportPDFassociated
        self.path = path
        self.user_id = user_id


class ReportPDF(db.Model, UserMixin):
    """
    Represents a PDF report generated by a user.

    Attributes:
        name (str): Name of the PDF file (primary key).
        date (str): Date when the PDF report was generated.
        path (str): File path where the PDF is stored.
        user_id (int): Foreign key referencing the user who generated the report.
    """
    name = db.Column(db.String(150), primary_key=True)
    date = db.Column(db.String(150))
    path = db.Column(db.String(150))
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))

    def __init__(self, name, date, path, user_id):
        self.name = name
        self.date = date
        self.path = path
        self.user_id = user_id